/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fi.tuni.monitor.roadapi.api;

import com.fasterxml.jackson.core.type.TypeReference;

import fi.tuni.monitor.roadapi.ApiException;
import fi.tuni.monitor.roadapi.ApiClient;
import fi.tuni.monitor.roadapi.Configuration;
import fi.tuni.monitor.roadapi.model.*;
import fi.tuni.monitor.roadapi.Pair;

import fi.tuni.monitor.roadapi.model.ForecastSectionFeatureCollectionSimpleV1;
import fi.tuni.monitor.roadapi.model.ForecastSectionFeatureCollectionV1;
import fi.tuni.monitor.roadapi.model.ForecastSectionFeatureSimpleV1;
import fi.tuni.monitor.roadapi.model.ForecastSectionFeatureV1;
import fi.tuni.monitor.roadapi.model.ForecastSectionWeatherDtoV1;
import fi.tuni.monitor.roadapi.model.ForecastSectionsWeatherDtoV1;
import fi.tuni.monitor.roadapi.model.RoadStationState;
import fi.tuni.monitor.roadapi.model.WeatherStationDataDtoV1;
import fi.tuni.monitor.roadapi.model.WeatherStationFeatureCollectionSimpleV1;
import fi.tuni.monitor.roadapi.model.WeatherStationFeatureDetailedV1;
import fi.tuni.monitor.roadapi.model.WeatherStationSensorsDtoV1;
import fi.tuni.monitor.roadapi.model.WeatherStationsDataDtoV1;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherBetaApi {
  private ApiClient apiClient;

  public WeatherBetaApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WeatherBetaApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * The static information of weather forecast sections
   * 
   * @param id Section id (required)
   * @param simplified If parameter is given with true value, result geometry will be smaller in size. (optional, default to false)
   * @return ForecastSectionFeatureV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionFeatureV1 forecastSectionById(String id, Boolean simplified) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling forecastSectionById");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("simplified", simplified));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionFeatureV1> localVarReturnType = new TypeReference<ForecastSectionFeatureV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of weather forecast sections
   * 
   * @param id Section id (required)
   * @return ForecastSectionWeatherDtoV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionWeatherDtoV1 forecastSectionForecastsById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling forecastSectionForecastsById");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections/{id}/forecasts"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionWeatherDtoV1> localVarReturnType = new TypeReference<ForecastSectionWeatherDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of simple weather forecast sections
   * 
   * @param id Section id (required)
   * @return ForecastSectionFeatureSimpleV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionFeatureSimpleV1 forecastSectionSimpleById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling forecastSectionSimpleById");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections-simple/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionFeatureSimpleV1> localVarReturnType = new TypeReference<ForecastSectionFeatureSimpleV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of simple weather forecast sections
   * 
   * @param id Section id (required)
   * @return ForecastSectionWeatherDtoV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionWeatherDtoV1 forecastSectionSimpleForecastsById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling forecastSectionSimpleForecastsById");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections-simple/{id}/forecasts"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionWeatherDtoV1> localVarReturnType = new TypeReference<ForecastSectionWeatherDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of weather forecast sections
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @param simplified If parameter is given with true value, result geometry will be smaller in size. (optional, default to false)
   * @param roadNumber Road number (optional)
   * @param xMin Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 19)
   * @param yMin Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 59)
   * @param xMax Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 32)
   * @param yMax Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 72)
   * @return ForecastSectionFeatureCollectionV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionFeatureCollectionV1 forecastSections(Boolean lastUpdated, Boolean simplified, Integer roadNumber, Double xMin, Double yMin, Double xMax, Double yMax) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));
    localVarQueryParams.addAll(apiClient.parameterToPair("simplified", simplified));
    localVarQueryParams.addAll(apiClient.parameterToPair("roadNumber", roadNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMin", xMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMin", yMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMax", xMax));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMax", yMax));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionFeatureCollectionV1> localVarReturnType = new TypeReference<ForecastSectionFeatureCollectionV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of detailed weather forecast sections
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @param roadNumber Road number (optional)
   * @param xMin Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 19)
   * @param yMin Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 59)
   * @param xMax Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 32)
   * @param yMax Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 72)
   * @return ForecastSectionsWeatherDtoV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionsWeatherDtoV1 forecastSectionsForecasts(Boolean lastUpdated, Integer roadNumber, Double xMin, Double yMin, Double xMax, Double yMax) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections/forecasts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));
    localVarQueryParams.addAll(apiClient.parameterToPair("roadNumber", roadNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMin", xMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMin", yMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMax", xMax));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMax", yMax));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionsWeatherDtoV1> localVarReturnType = new TypeReference<ForecastSectionsWeatherDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of simple weather forecast sections
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @param roadNumber Road number (optional)
   * @param xMin Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 19)
   * @param yMin Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 59)
   * @param xMax Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 32)
   * @param yMax Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 72)
   * @return ForecastSectionFeatureCollectionSimpleV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionFeatureCollectionSimpleV1 forecastSectionsSimple(Boolean lastUpdated, Integer roadNumber, Double xMin, Double yMin, Double xMax, Double yMax) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections-simple";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));
    localVarQueryParams.addAll(apiClient.parameterToPair("roadNumber", roadNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMin", xMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMin", yMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMax", xMax));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMax", yMax));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionFeatureCollectionSimpleV1> localVarReturnType = new TypeReference<ForecastSectionFeatureCollectionSimpleV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of simple weather forecast sections
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @param roadNumber Road number (optional)
   * @param xMin Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 19)
   * @param yMin Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 59)
   * @param xMax Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0. (optional, default to 32)
   * @param yMax Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0. (optional, default to 72)
   * @return ForecastSectionsWeatherDtoV1
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionsWeatherDtoV1 forecastSectionsSimpleForecasts(Boolean lastUpdated, Integer roadNumber, Double xMin, Double yMin, Double xMax, Double yMax) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/forecast-sections-simple/forecasts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));
    localVarQueryParams.addAll(apiClient.parameterToPair("roadNumber", roadNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMin", xMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMin", yMin));
    localVarQueryParams.addAll(apiClient.parameterToPair("xMax", xMax));
    localVarQueryParams.addAll(apiClient.parameterToPair("yMax", yMax));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionsWeatherDtoV1> localVarReturnType = new TypeReference<ForecastSectionsWeatherDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of weather stations
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return WeatherStationsDataDtoV1
   * @throws ApiException if fails to make API call
   */
  public WeatherStationsDataDtoV1 weatherData(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/stations/data";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherStationsDataDtoV1> localVarReturnType = new TypeReference<WeatherStationsDataDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of one weather station
   * 
   * @param id TMS Station id (required)
   * @return WeatherStationDataDtoV1
   * @throws ApiException if fails to make API call
   */
  public WeatherStationDataDtoV1 weatherDataById(Long id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling weatherDataById");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/stations/{id}/data"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherStationDataDtoV1> localVarReturnType = new TypeReference<WeatherStationDataDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of available sensors of weather stations
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return WeatherStationSensorsDtoV1
   * @throws ApiException if fails to make API call
   */
  public WeatherStationSensorsDtoV1 weatherSensors(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/sensors";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherStationSensorsDtoV1> localVarReturnType = new TypeReference<WeatherStationSensorsDtoV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of one weather station
   * 
   * @param id  (required)
   * @return WeatherStationFeatureDetailedV1
   * @throws ApiException if fails to make API call
   */
  public WeatherStationFeatureDetailedV1 weatherStationByRoadStationId(Long id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling weatherStationByRoadStationId");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/stations/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherStationFeatureDetailedV1> localVarReturnType = new TypeReference<WeatherStationFeatureDetailedV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * The static information of weather stations
   * 
   * @param state Return weather stations of given state. (required)
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return WeatherStationFeatureCollectionSimpleV1
   * @throws ApiException if fails to make API call
   */
  public WeatherStationFeatureCollectionSimpleV1 weatherStations(RoadStationState state, Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'state' is set
    if (state == null) {
      throw new ApiException(400, "Missing the required parameter 'state' when calling weatherStations");
    }
    
    // create path and map variables
    String localVarPath = "/api/weather/beta/stations";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));
    localVarQueryParams.addAll(apiClient.parameterToPair("state", state));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8", "application/geo+json;charset=UTF-8", "application/vnd.geo+json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherStationFeatureCollectionSimpleV1> localVarReturnType = new TypeReference<WeatherStationFeatureCollectionSimpleV1>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
