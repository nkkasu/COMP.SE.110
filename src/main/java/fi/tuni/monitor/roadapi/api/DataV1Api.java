/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fi.tuni.monitor.roadapi.api;

import com.fasterxml.jackson.core.type.TypeReference;

import fi.tuni.monitor.roadapi.ApiException;
import fi.tuni.monitor.roadapi.ApiClient;
import fi.tuni.monitor.roadapi.Configuration;
import fi.tuni.monitor.roadapi.model.*;
import fi.tuni.monitor.roadapi.Pair;

import fi.tuni.monitor.roadapi.model.CameraData;
import fi.tuni.monitor.roadapi.model.ForecastSectionWeatherRoot;
import fi.tuni.monitor.roadapi.model.FreeFlowSpeedData;
import fi.tuni.monitor.roadapi.model.MessageResponseModel;
import fi.tuni.monitor.roadapi.model.RoadworksDatex2Response;
import fi.tuni.monitor.roadapi.model.TmsData;
import fi.tuni.monitor.roadapi.model.TmsSensorConstantData;
import fi.tuni.monitor.roadapi.model.TrafficDisordersDatex2Response;
import fi.tuni.monitor.roadapi.model.WeatherData;
import fi.tuni.monitor.roadapi.model.WeightRestrictionsDatex2Response;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataV1Api {
  private ApiClient apiClient;

  public DataV1Api() {
    this(Configuration.getDefaultApiClient());
  }

  public DataV1Api(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Return all variables signs as datex2
   * 
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object apiV1VariableSignsDatex2Get() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/variable-signs/datex2";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/xml"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Generate svg-image from given text
   * 
   * @param text  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object apiV1VariableSignsImagesTextGet(String text) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'text' is set
    if (text == null) {
      throw new ApiException(400, "Missing the required parameter 'text' when calling apiV1VariableSignsImagesTextGet");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/variable-signs/images/{text}"
      .replaceAll("\\{" + "text" + "\\}", apiClient.escapeString(text.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "image/svg+xml", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of cameras
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return CameraData
   * @throws ApiException if fails to make API call
   */
  public CameraData cameraData(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/camera-data";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CameraData> localVarReturnType = new TypeReference<CameraData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of camera
   * 
   * @param id Camera id (required)
   * @return CameraData
   * @throws ApiException if fails to make API call
   */
  public CameraData cameraDataById(String id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling cameraDataById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/camera-data/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CameraData> localVarReturnType = new TypeReference<CameraData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current free flow speeds. This API is deprecated, use tms-sensor-constants and values VVAPAAS1 &amp; VVAPAAS2. Will be removed after 2022-11-01
   * 
   * @param lastUpdated If parameter is given result will only contain update status (optional, default to false)
   * @return FreeFlowSpeedData
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public FreeFlowSpeedData freeFlowSpeeds(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/free-flow-speeds";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<FreeFlowSpeedData> localVarReturnType = new TypeReference<FreeFlowSpeedData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current free flow speeds of TMS station (Traffic Measurement System / LAM). This API is deprecated, use tms-sensor-constants and values VVAPAAS1 &amp; VVAPAAS2. Will be removed after 2022-11-01
   * 
   * @param id TMS station id (required)
   * @return FreeFlowSpeedData
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public FreeFlowSpeedData freeFlowSpeedsOfTmsById(Long id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling freeFlowSpeedsOfTmsById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/free-flow-speeds/tms/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<FreeFlowSpeedData> localVarReturnType = new TypeReference<FreeFlowSpeedData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of Weather Forecast Sections
   * 
   * @param lastUpdated If parameter is given result will only contain update status (optional, default to false)
   * @return ForecastSectionWeatherRoot
   * @throws ApiException if fails to make API call
   */
  public ForecastSectionWeatherRoot roadConditions6(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/road-conditions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ForecastSectionWeatherRoot> localVarReturnType = new TypeReference<ForecastSectionWeatherRoot>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Active roadwork Datex2 messages. Will be removed after 2022-11-01
   * 
   * @param inactiveHours Return roadworks from given amount of hours in the past. (optional, default to 0)
   * @return RoadworksDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public RoadworksDatex2Response roadworksDatex2(Integer inactiveHours) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/roadworks-datex2";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("inactiveHours", inactiveHours));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<RoadworksDatex2Response> localVarReturnType = new TypeReference<RoadworksDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Roadwork Datex2 messages by situation id. Will be removed after 2022-11-01
   * 
   * @param situationId Situation id. (required)
   * @return RoadworksDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public RoadworksDatex2Response roadworksDatex2BySituationId(String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'situationId' is set
    if (situationId == null) {
      throw new ApiException(400, "Missing the required parameter 'situationId' when calling roadworksDatex2BySituationId");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/roadworks-datex2/{situationId}"
      .replaceAll("\\{" + "situationId" + "\\}", apiClient.escapeString(situationId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<RoadworksDatex2Response> localVarReturnType = new TypeReference<RoadworksDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Roadwork Datex2 messages history. Will be removed after 2022-11-01
   * 
   * @param year Year (&gt;2014) (required)
   * @param month Month (1-12) (required)
   * @param situationId Situation id (optional)
   * @return RoadworksDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public RoadworksDatex2Response roadworksDatex2OfHistory(Integer year, Integer month, String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'year' is set
    if (year == null) {
      throw new ApiException(400, "Missing the required parameter 'year' when calling roadworksDatex2OfHistory");
    }
    
    // verify the required parameter 'month' is set
    if (month == null) {
      throw new ApiException(400, "Missing the required parameter 'month' when calling roadworksDatex2OfHistory");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/roadworks-datex2/history";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("situationId", situationId));
    localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
    localVarQueryParams.addAll(apiClient.parameterToPair("month", month));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<RoadworksDatex2Response> localVarReturnType = new TypeReference<RoadworksDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of TMS Stations (Traffic Measurement System / LAM)
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return TmsData
   * @throws ApiException if fails to make API call
   */
  public TmsData tmsData(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/tms-data";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TmsData> localVarReturnType = new TypeReference<TmsData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of TMS station (Traffic Measurement System / LAM)
   * 
   * @param id TMS Station id (required)
   * @return TmsData
   * @throws ApiException if fails to make API call
   */
  public TmsData tmsDataById(Long id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling tmsDataById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/tms-data/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TmsData> localVarReturnType = new TypeReference<TmsData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current sensor constants and values of TMS station (Traffic Measurement System / LAM)
   * 
   * @param lastUpdated If parameter is given result will only contain update status (optional, default to false)
   * @return TmsSensorConstantData
   * @throws ApiException if fails to make API call
   */
  public TmsSensorConstantData tmsSensorConstants(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/tms-sensor-constants";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TmsSensorConstantData> localVarReturnType = new TypeReference<TmsSensorConstantData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Active traffic disorders Datex2 messages. Will be removed after 2022-11-01
   * 
   * @param inactiveHours Return traffic disorders from given amount of hours in the past. (optional, default to 0)
   * @return TrafficDisordersDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public TrafficDisordersDatex2Response trafficDisordersDatex2(Integer inactiveHours) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/traffic-disorders-datex2";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("inactiveHours", inactiveHours));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TrafficDisordersDatex2Response> localVarReturnType = new TypeReference<TrafficDisordersDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Traffic disorder Datex2 messages by situation id. Will be removed after 2022-11-01
   * 
   * @param situationId Situation id. (required)
   * @return TrafficDisordersDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public TrafficDisordersDatex2Response trafficDisordersDatex2BySituationId(String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'situationId' is set
    if (situationId == null) {
      throw new ApiException(400, "Missing the required parameter 'situationId' when calling trafficDisordersDatex2BySituationId");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/traffic-disorders-datex2/{situationId}"
      .replaceAll("\\{" + "situationId" + "\\}", apiClient.escapeString(situationId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TrafficDisordersDatex2Response> localVarReturnType = new TypeReference<TrafficDisordersDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Traffic disorder Datex2 messages disorders history. Will be removed after 2022-11-01
   * 
   * @param year Year (&gt;2014) (required)
   * @param month Month (1-12) (required)
   * @param situationId Situation id (optional)
   * @return TrafficDisordersDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public TrafficDisordersDatex2Response trafficDisordersDatex2OfHistory(Integer year, Integer month, String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'year' is set
    if (year == null) {
      throw new ApiException(400, "Missing the required parameter 'year' when calling trafficDisordersDatex2OfHistory");
    }
    
    // verify the required parameter 'month' is set
    if (month == null) {
      throw new ApiException(400, "Missing the required parameter 'month' when calling trafficDisordersDatex2OfHistory");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/traffic-disorders-datex2/history";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("situationId", situationId));
    localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
    localVarQueryParams.addAll(apiClient.parameterToPair("month", month));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TrafficDisordersDatex2Response> localVarReturnType = new TypeReference<TrafficDisordersDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of Weather Stations
   * 
   * @param lastUpdated If parameter is given result will only contain update status. (optional, default to false)
   * @return WeatherData
   * @throws ApiException if fails to make API call
   */
  public WeatherData weatherData(Boolean lastUpdated) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/weather-data";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdated", lastUpdated));

    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherData> localVarReturnType = new TypeReference<WeatherData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Current data of Weather Station
   * 
   * @param id Weather Station id (required)
   * @return WeatherData
   * @throws ApiException if fails to make API call
   */
  public WeatherData weatherDataById(Long id) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling weatherDataById");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/weather-data/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeatherData> localVarReturnType = new TypeReference<WeatherData>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Active weight restrictions Datex2 messages. Will be removed after 2022-11-01
   * 
   * @param inactiveHours Return weight restrictions from given amount of hours in the past. (optional, default to 0)
   * @return WeightRestrictionsDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public WeightRestrictionsDatex2Response weightRestrictionsDatex2(Integer inactiveHours) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/data/weight-restrictions-datex2";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("inactiveHours", inactiveHours));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeightRestrictionsDatex2Response> localVarReturnType = new TypeReference<WeightRestrictionsDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Weight restrictions Datex2 messages by situation id. Will be removed after 2022-11-01
   * 
   * @param situationId Situation id. (required)
   * @return WeightRestrictionsDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public WeightRestrictionsDatex2Response weightRestrictionsDatex2BySituationId(String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'situationId' is set
    if (situationId == null) {
      throw new ApiException(400, "Missing the required parameter 'situationId' when calling weightRestrictionsDatex2BySituationId");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/weight-restrictions-datex2/{situationId}"
      .replaceAll("\\{" + "situationId" + "\\}", apiClient.escapeString(situationId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeightRestrictionsDatex2Response> localVarReturnType = new TypeReference<WeightRestrictionsDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Weight restriction Datex2 messages history. Will be removed after 2022-11-01
   * 
   * @param year Year (&gt;2014) (required)
   * @param month Month (1-12) (required)
   * @param situationId Situation id (optional)
   * @return WeightRestrictionsDatex2Response
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public WeightRestrictionsDatex2Response weightRestrictionsDatex2OfHistory(Integer year, Integer month, String situationId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'year' is set
    if (year == null) {
      throw new ApiException(400, "Missing the required parameter 'year' when calling weightRestrictionsDatex2OfHistory");
    }
    
    // verify the required parameter 'month' is set
    if (month == null) {
      throw new ApiException(400, "Missing the required parameter 'month' when calling weightRestrictionsDatex2OfHistory");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/data/weight-restrictions-datex2/history";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("situationId", situationId));
    localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
    localVarQueryParams.addAll(apiClient.parameterToPair("month", month));

    
    
    
    final String[] localVarAccepts = {
      "application/xml;charset=UTF-8", "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<WeightRestrictionsDatex2Response> localVarReturnType = new TypeReference<WeightRestrictionsDatex2Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
