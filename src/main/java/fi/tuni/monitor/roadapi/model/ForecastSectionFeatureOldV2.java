/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.ForecastSectionPropertiesOldV2;
import fi.tuni.monitor.roadapi.model.MultiLineString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GeoJSON Feature Object
 */
@ApiModel(description = "GeoJSON Feature Object")
@JsonPropertyOrder({
  ForecastSectionFeatureOldV2.JSON_PROPERTY_TYPE,
  ForecastSectionFeatureOldV2.JSON_PROPERTY_ID,
  ForecastSectionFeatureOldV2.JSON_PROPERTY_GEOMETRY,
  ForecastSectionFeatureOldV2.JSON_PROPERTY_PROPERTIES
})
@JsonTypeName("ForecastSectionFeature_OldV2")
public class ForecastSectionFeatureOldV2 {
  /**
   * \&quot;Feature\&quot;: GeoJSON Feature Object
   */
  public enum TypeEnum {
    FEATURE("Feature");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_GEOMETRY = "geometry";
  private MultiLineString geometry;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private ForecastSectionPropertiesOldV2 properties;

  public ForecastSectionFeatureOldV2() {
  }

  public ForecastSectionFeatureOldV2 type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * \&quot;Feature\&quot;: GeoJSON Feature Object
   * @return type
  **/
 
  @ApiModelProperty(required = true, value = "\"Feature\": GeoJSON Feature Object")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ForecastSectionFeatureOldV2 id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Forecast section id
   * @return id
  **/
 
  @ApiModelProperty(required = true, value = "Forecast section id")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public ForecastSectionFeatureOldV2 geometry(MultiLineString geometry) {
    
    this.geometry = geometry;
    return this;
  }

   /**
   * Get geometry
   * @return geometry
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_GEOMETRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MultiLineString getGeometry() {
    return geometry;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGeometry(MultiLineString geometry) {
    this.geometry = geometry;
  }


  public ForecastSectionFeatureOldV2 properties(ForecastSectionPropertiesOldV2 properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ForecastSectionPropertiesOldV2 getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperties(ForecastSectionPropertiesOldV2 properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastSectionFeatureOldV2 forecastSectionFeatureOldV2 = (ForecastSectionFeatureOldV2) o;
    return Objects.equals(this.type, forecastSectionFeatureOldV2.type) &&
        Objects.equals(this.id, forecastSectionFeatureOldV2.id) &&
        Objects.equals(this.geometry, forecastSectionFeatureOldV2.geometry) &&
        Objects.equals(this.properties, forecastSectionFeatureOldV2.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, geometry, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastSectionFeatureOldV2 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

