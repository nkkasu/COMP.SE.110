/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Maintenance tracking properties
 */
@ApiModel(description = "Maintenance tracking properties")
@JsonPropertyOrder({
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_ID,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_PREVIOUS_ID,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_SENDING_TIME,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_CREATED,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_TASKS,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_START_TIME,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_END_TIME,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_DIRECTION,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_DOMAIN,
  MaintenanceTrackingPropertiesOld.JSON_PROPERTY_SOURCE
})
public class MaintenanceTrackingPropertiesOld {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_PREVIOUS_ID = "previousId";
  private Long previousId;

  public static final String JSON_PROPERTY_SENDING_TIME = "sendingTime";
  private OffsetDateTime sendingTime;

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  /**
   * Tasks done during maintenance work
   */
  public enum TasksEnum {
    BRUSHING("BRUSHING"),
    
    BRUSH_CLEARING("BRUSH_CLEARING"),
    
    CLEANSING_OF_BRIDGES("CLEANSING_OF_BRIDGES"),
    
    CLEANSING_OF_REST_AREAS("CLEANSING_OF_REST_AREAS"),
    
    CLEANSING_OF_TRAFFIC_SIGNS("CLEANSING_OF_TRAFFIC_SIGNS"),
    
    CLIENTS_QUALITY_CONTROL("CLIENTS_QUALITY_CONTROL"),
    
    COMPACTION_BY_ROLLING("COMPACTION_BY_ROLLING"),
    
    CRACK_FILLING("CRACK_FILLING"),
    
    DITCHING("DITCHING"),
    
    DUST_BINDING_OF_GRAVEL_ROAD_SURFACE("DUST_BINDING_OF_GRAVEL_ROAD_SURFACE"),
    
    FILLING_OF_GRAVEL_ROAD_SHOULDERS("FILLING_OF_GRAVEL_ROAD_SHOULDERS"),
    
    FILLING_OF_ROAD_SHOULDERS("FILLING_OF_ROAD_SHOULDERS"),
    
    HEATING("HEATING"),
    
    LEVELLING_GRAVEL_ROAD_SURFACE("LEVELLING_GRAVEL_ROAD_SURFACE"),
    
    LEVELLING_OF_ROAD_SHOULDERS("LEVELLING_OF_ROAD_SHOULDERS"),
    
    LEVELLING_OF_ROAD_SURFACE("LEVELLING_OF_ROAD_SURFACE"),
    
    LINE_SANDING("LINE_SANDING"),
    
    LOWERING_OF_SNOWBANKS("LOWERING_OF_SNOWBANKS"),
    
    MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS("MAINTENANCE_OF_GUIDE_SIGNS_AND_REFLECTOR_POSTS"),
    
    MECHANICAL_CUT("MECHANICAL_CUT"),
    
    MIXING_OR_STABILIZATION("MIXING_OR_STABILIZATION"),
    
    OTHER("OTHER"),
    
    PATCHING("PATCHING"),
    
    PAVING("PAVING"),
    
    PLOUGHING_AND_SLUSH_REMOVAL("PLOUGHING_AND_SLUSH_REMOVAL"),
    
    PREVENTING_MELTING_WATER_PROBLEMS("PREVENTING_MELTING_WATER_PROBLEMS"),
    
    REMOVAL_OF_BULGE_ICE("REMOVAL_OF_BULGE_ICE"),
    
    RESHAPING_GRAVEL_ROAD_SURFACE("RESHAPING_GRAVEL_ROAD_SURFACE"),
    
    ROAD_INSPECTIONS("ROAD_INSPECTIONS"),
    
    ROAD_MARKINGS("ROAD_MARKINGS"),
    
    ROAD_STATE_CHECKING("ROAD_STATE_CHECKING"),
    
    SAFETY_EQUIPMENT("SAFETY_EQUIPMENT"),
    
    SALTING("SALTING"),
    
    SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES("SNOW_PLOUGHING_STICKS_AND_SNOW_FENCES"),
    
    SPOT_SANDING("SPOT_SANDING"),
    
    SPREADING_OF_CRUSH("SPREADING_OF_CRUSH"),
    
    TRANSFER_OF_SNOW("TRANSFER_OF_SNOW"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TasksEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TasksEnum fromValue(String value) {
      for (TasksEnum b : TasksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private Set<TasksEnum> tasks = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private OffsetDateTime startTime;

  public static final String JSON_PROPERTY_END_TIME = "endTime";
  private OffsetDateTime endTime;

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private BigDecimal direction;

  public static final String JSON_PROPERTY_DOMAIN = "domain";
  private String domain;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public MaintenanceTrackingPropertiesOld() {
  }

  public MaintenanceTrackingPropertiesOld id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id for the tracking
   * @return id
  **/
 
  @ApiModelProperty(required = true, value = "Id for the tracking")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public MaintenanceTrackingPropertiesOld previousId(Long previousId) {
    
    this.previousId = previousId;
    return this;
  }

   /**
   * Id for the previous tracking if known
   * @return previousId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id for the previous tracking if known")
  @JsonProperty(JSON_PROPERTY_PREVIOUS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPreviousId() {
    return previousId;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousId(Long previousId) {
    this.previousId = previousId;
  }


  public MaintenanceTrackingPropertiesOld sendingTime(OffsetDateTime sendingTime) {
    
    this.sendingTime = sendingTime;
    return this;
  }

   /**
   * Time when tracking was reported
   * @return sendingTime
  **/
 
  @ApiModelProperty(required = true, value = "Time when tracking was reported")
  @JsonProperty(JSON_PROPERTY_SENDING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getSendingTime() {
    return sendingTime;
  }


  @JsonProperty(JSON_PROPERTY_SENDING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSendingTime(OffsetDateTime sendingTime) {
    this.sendingTime = sendingTime;
  }


  public MaintenanceTrackingPropertiesOld created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Creation time of tracking
   * @return created
  **/
 
  @ApiModelProperty(required = true, value = "Creation time of tracking")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public MaintenanceTrackingPropertiesOld tasks(Set<TasksEnum> tasks) {
    
    this.tasks = tasks;
    return this;
  }

  public MaintenanceTrackingPropertiesOld addTasksItem(TasksEnum tasksItem) {
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Tasks done during maintenance work
   * @return tasks
  **/
 
  @ApiModelProperty(required = true, value = "Tasks done during maintenance work")
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<TasksEnum> getTasks() {
    return tasks;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTasks(Set<TasksEnum> tasks) {
    this.tasks = tasks;
  }


  public MaintenanceTrackingPropertiesOld startTime(OffsetDateTime startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Start time of maintenance work tasks
   * @return startTime
  **/
 
  @ApiModelProperty(required = true, value = "Start time of maintenance work tasks")
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public MaintenanceTrackingPropertiesOld endTime(OffsetDateTime endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * End time of maintenance work tasks
   * @return endTime
  **/
 
  @ApiModelProperty(required = true, value = "End time of maintenance work tasks")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public MaintenanceTrackingPropertiesOld direction(BigDecimal direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Direction of the last observation
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Direction of the last observation")
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDirection() {
    return direction;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(BigDecimal direction) {
    this.direction = direction;
  }


  public MaintenanceTrackingPropertiesOld domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Domain of the data
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Domain of the data")
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(String domain) {
    this.domain = domain;
  }


  public MaintenanceTrackingPropertiesOld source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Source and owner of the data
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source and owner of the data")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceTrackingPropertiesOld maintenanceTrackingPropertiesOld = (MaintenanceTrackingPropertiesOld) o;
    return Objects.equals(this.id, maintenanceTrackingPropertiesOld.id) &&
        Objects.equals(this.previousId, maintenanceTrackingPropertiesOld.previousId) &&
        Objects.equals(this.sendingTime, maintenanceTrackingPropertiesOld.sendingTime) &&
        Objects.equals(this.created, maintenanceTrackingPropertiesOld.created) &&
        Objects.equals(this.tasks, maintenanceTrackingPropertiesOld.tasks) &&
        Objects.equals(this.startTime, maintenanceTrackingPropertiesOld.startTime) &&
        Objects.equals(this.endTime, maintenanceTrackingPropertiesOld.endTime) &&
        Objects.equals(this.direction, maintenanceTrackingPropertiesOld.direction) &&
        Objects.equals(this.domain, maintenanceTrackingPropertiesOld.domain) &&
        Objects.equals(this.source, maintenanceTrackingPropertiesOld.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, previousId, sendingTime, created, tasks, startTime, endTime, direction, domain, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceTrackingPropertiesOld {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    previousId: ").append(toIndentedString(previousId)).append("\n");
    sb.append("    sendingTime: ").append(toIndentedString(sendingTime)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

