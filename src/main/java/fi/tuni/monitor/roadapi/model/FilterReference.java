/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.ExtensionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FilterReference
 */
@JsonPropertyOrder({
  FilterReference.JSON_PROPERTY_DELETE_FILTER,
  FilterReference.JSON_PROPERTY_FILTER_OPERATION_APPROVED,
  FilterReference.JSON_PROPERTY_KEY_FILTER_REFERENCE,
  FilterReference.JSON_PROPERTY_FILTER_REFERENCE_EXTENSION
})
public class FilterReference {
  public static final String JSON_PROPERTY_DELETE_FILTER = "deleteFilter";
  private Boolean deleteFilter;

  public static final String JSON_PROPERTY_FILTER_OPERATION_APPROVED = "filterOperationApproved";
  private Boolean filterOperationApproved;

  public static final String JSON_PROPERTY_KEY_FILTER_REFERENCE = "keyFilterReference";
  private String keyFilterReference;

  public static final String JSON_PROPERTY_FILTER_REFERENCE_EXTENSION = "filterReferenceExtension";
  private ExtensionType filterReferenceExtension;

  public FilterReference() {
  }

  public FilterReference deleteFilter(Boolean deleteFilter) {
    
    this.deleteFilter = deleteFilter;
    return this;
  }

   /**
   * Get deleteFilter
   * @return deleteFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DELETE_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDeleteFilter() {
    return deleteFilter;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteFilter(Boolean deleteFilter) {
    this.deleteFilter = deleteFilter;
  }


  public FilterReference filterOperationApproved(Boolean filterOperationApproved) {
    
    this.filterOperationApproved = filterOperationApproved;
    return this;
  }

   /**
   * Get filterOperationApproved
   * @return filterOperationApproved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_OPERATION_APPROVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFilterOperationApproved() {
    return filterOperationApproved;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_OPERATION_APPROVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterOperationApproved(Boolean filterOperationApproved) {
    this.filterOperationApproved = filterOperationApproved;
  }


  public FilterReference keyFilterReference(String keyFilterReference) {
    
    this.keyFilterReference = keyFilterReference;
    return this;
  }

   /**
   * Get keyFilterReference
   * @return keyFilterReference
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_KEY_FILTER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKeyFilterReference() {
    return keyFilterReference;
  }


  @JsonProperty(JSON_PROPERTY_KEY_FILTER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKeyFilterReference(String keyFilterReference) {
    this.keyFilterReference = keyFilterReference;
  }


  public FilterReference filterReferenceExtension(ExtensionType filterReferenceExtension) {
    
    this.filterReferenceExtension = filterReferenceExtension;
    return this;
  }

   /**
   * Get filterReferenceExtension
   * @return filterReferenceExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_REFERENCE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtensionType getFilterReferenceExtension() {
    return filterReferenceExtension;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_REFERENCE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterReferenceExtension(ExtensionType filterReferenceExtension) {
    this.filterReferenceExtension = filterReferenceExtension;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterReference filterReference = (FilterReference) o;
    return Objects.equals(this.deleteFilter, filterReference.deleteFilter) &&
        Objects.equals(this.filterOperationApproved, filterReference.filterOperationApproved) &&
        Objects.equals(this.keyFilterReference, filterReference.keyFilterReference) &&
        Objects.equals(this.filterReferenceExtension, filterReference.filterReferenceExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteFilter, filterOperationApproved, keyFilterReference, filterReferenceExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterReference {\n");
    sb.append("    deleteFilter: ").append(toIndentedString(deleteFilter)).append("\n");
    sb.append("    filterOperationApproved: ").append(toIndentedString(filterOperationApproved)).append("\n");
    sb.append("    keyFilterReference: ").append(toIndentedString(keyFilterReference)).append("\n");
    sb.append("    filterReferenceExtension: ").append(toIndentedString(filterReferenceExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

