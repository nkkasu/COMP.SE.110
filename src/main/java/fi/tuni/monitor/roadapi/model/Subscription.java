/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.CatalogueReference;
import fi.tuni.monitor.roadapi.model.ExtensionType;
import fi.tuni.monitor.roadapi.model.FilterReference;
import fi.tuni.monitor.roadapi.model.Target;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Subscription
 */
@JsonPropertyOrder({
  Subscription.JSON_PROPERTY_DELETE_SUBSCRIPTION,
  Subscription.JSON_PROPERTY_DELIVERY_INTERVAL,
  Subscription.JSON_PROPERTY_OPERATING_MODE,
  Subscription.JSON_PROPERTY_SUBSCRIPTION_START_TIME,
  Subscription.JSON_PROPERTY_SUBSCRIPTION_STATE,
  Subscription.JSON_PROPERTY_SUBSCRIPTION_STOP_TIME,
  Subscription.JSON_PROPERTY_UPDATE_METHOD,
  Subscription.JSON_PROPERTY_TARGETS,
  Subscription.JSON_PROPERTY_FILTER_REFERENCE,
  Subscription.JSON_PROPERTY_CATALOGUE_REFERENCE,
  Subscription.JSON_PROPERTY_SUBSCRIPTION_EXTENSION
})
public class Subscription {
  public static final String JSON_PROPERTY_DELETE_SUBSCRIPTION = "deleteSubscription";
  private Boolean deleteSubscription;

  public static final String JSON_PROPERTY_DELIVERY_INTERVAL = "deliveryInterval";
  private Float deliveryInterval;

  /**
   * Gets or Sets operatingMode
   */
  public enum OperatingModeEnum {
    _0("OPERATING_MODE_0"),
    
    _1("OPERATING_MODE_1"),
    
    _2("OPERATING_MODE_2"),
    
    _3("OPERATING_MODE_3");

    private String value;

    OperatingModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperatingModeEnum fromValue(String value) {
      for (OperatingModeEnum b : OperatingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OPERATING_MODE = "operatingMode";
  private OperatingModeEnum operatingMode;

  public static final String JSON_PROPERTY_SUBSCRIPTION_START_TIME = "subscriptionStartTime";
  private OffsetDateTime subscriptionStartTime;

  /**
   * Gets or Sets subscriptionState
   */
  public enum SubscriptionStateEnum {
    ACTIVE("ACTIVE"),
    
    SUSPENDED("SUSPENDED");

    private String value;

    SubscriptionStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubscriptionStateEnum fromValue(String value) {
      for (SubscriptionStateEnum b : SubscriptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUBSCRIPTION_STATE = "subscriptionState";
  private SubscriptionStateEnum subscriptionState;

  public static final String JSON_PROPERTY_SUBSCRIPTION_STOP_TIME = "subscriptionStopTime";
  private OffsetDateTime subscriptionStopTime;

  /**
   * Gets or Sets updateMethod
   */
  public enum UpdateMethodEnum {
    ALL_ELEMENT_UPDATE("ALL_ELEMENT_UPDATE"),
    
    SINGLE_ELEMENT_UPDATE("SINGLE_ELEMENT_UPDATE"),
    
    SNAPSHOT("SNAPSHOT");

    private String value;

    UpdateMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UpdateMethodEnum fromValue(String value) {
      for (UpdateMethodEnum b : UpdateMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UPDATE_METHOD = "updateMethod";
  private UpdateMethodEnum updateMethod;

  public static final String JSON_PROPERTY_TARGETS = "targets";
  private List<Target> targets = new ArrayList<>();

  public static final String JSON_PROPERTY_FILTER_REFERENCE = "filterReference";
  private FilterReference filterReference;

  public static final String JSON_PROPERTY_CATALOGUE_REFERENCE = "catalogueReference";
  private CatalogueReference catalogueReference;

  public static final String JSON_PROPERTY_SUBSCRIPTION_EXTENSION = "subscriptionExtension";
  private ExtensionType subscriptionExtension;

  public Subscription() {
  }

  public Subscription deleteSubscription(Boolean deleteSubscription) {
    
    this.deleteSubscription = deleteSubscription;
    return this;
  }

   /**
   * Get deleteSubscription
   * @return deleteSubscription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DELETE_SUBSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDeleteSubscription() {
    return deleteSubscription;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_SUBSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteSubscription(Boolean deleteSubscription) {
    this.deleteSubscription = deleteSubscription;
  }


  public Subscription deliveryInterval(Float deliveryInterval) {
    
    this.deliveryInterval = deliveryInterval;
    return this;
  }

   /**
   * Get deliveryInterval
   * @return deliveryInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DELIVERY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getDeliveryInterval() {
    return deliveryInterval;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeliveryInterval(Float deliveryInterval) {
    this.deliveryInterval = deliveryInterval;
  }


  public Subscription operatingMode(OperatingModeEnum operatingMode) {
    
    this.operatingMode = operatingMode;
    return this;
  }

   /**
   * Get operatingMode
   * @return operatingMode
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OPERATING_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OperatingModeEnum getOperatingMode() {
    return operatingMode;
  }


  @JsonProperty(JSON_PROPERTY_OPERATING_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperatingMode(OperatingModeEnum operatingMode) {
    this.operatingMode = operatingMode;
  }


  public Subscription subscriptionStartTime(OffsetDateTime subscriptionStartTime) {
    
    this.subscriptionStartTime = subscriptionStartTime;
    return this;
  }

   /**
   * Get subscriptionStartTime
   * @return subscriptionStartTime
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getSubscriptionStartTime() {
    return subscriptionStartTime;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscriptionStartTime(OffsetDateTime subscriptionStartTime) {
    this.subscriptionStartTime = subscriptionStartTime;
  }


  public Subscription subscriptionState(SubscriptionStateEnum subscriptionState) {
    
    this.subscriptionState = subscriptionState;
    return this;
  }

   /**
   * Get subscriptionState
   * @return subscriptionState
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubscriptionStateEnum getSubscriptionState() {
    return subscriptionState;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscriptionState(SubscriptionStateEnum subscriptionState) {
    this.subscriptionState = subscriptionState;
  }


  public Subscription subscriptionStopTime(OffsetDateTime subscriptionStopTime) {
    
    this.subscriptionStopTime = subscriptionStopTime;
    return this;
  }

   /**
   * Get subscriptionStopTime
   * @return subscriptionStopTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getSubscriptionStopTime() {
    return subscriptionStopTime;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionStopTime(OffsetDateTime subscriptionStopTime) {
    this.subscriptionStopTime = subscriptionStopTime;
  }


  public Subscription updateMethod(UpdateMethodEnum updateMethod) {
    
    this.updateMethod = updateMethod;
    return this;
  }

   /**
   * Get updateMethod
   * @return updateMethod
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UpdateMethodEnum getUpdateMethod() {
    return updateMethod;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdateMethod(UpdateMethodEnum updateMethod) {
    this.updateMethod = updateMethod;
  }


  public Subscription targets(List<Target> targets) {
    
    this.targets = targets;
    return this;
  }

  public Subscription addTargetsItem(Target targetsItem) {
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Get targets
   * @return targets
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Target> getTargets() {
    return targets;
  }


  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public Subscription filterReference(FilterReference filterReference) {
    
    this.filterReference = filterReference;
    return this;
  }

   /**
   * Get filterReference
   * @return filterReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterReference getFilterReference() {
    return filterReference;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterReference(FilterReference filterReference) {
    this.filterReference = filterReference;
  }


  public Subscription catalogueReference(CatalogueReference catalogueReference) {
    
    this.catalogueReference = catalogueReference;
    return this;
  }

   /**
   * Get catalogueReference
   * @return catalogueReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATALOGUE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CatalogueReference getCatalogueReference() {
    return catalogueReference;
  }


  @JsonProperty(JSON_PROPERTY_CATALOGUE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogueReference(CatalogueReference catalogueReference) {
    this.catalogueReference = catalogueReference;
  }


  public Subscription subscriptionExtension(ExtensionType subscriptionExtension) {
    
    this.subscriptionExtension = subscriptionExtension;
    return this;
  }

   /**
   * Get subscriptionExtension
   * @return subscriptionExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtensionType getSubscriptionExtension() {
    return subscriptionExtension;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionExtension(ExtensionType subscriptionExtension) {
    this.subscriptionExtension = subscriptionExtension;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.deleteSubscription, subscription.deleteSubscription) &&
        Objects.equals(this.deliveryInterval, subscription.deliveryInterval) &&
        Objects.equals(this.operatingMode, subscription.operatingMode) &&
        Objects.equals(this.subscriptionStartTime, subscription.subscriptionStartTime) &&
        Objects.equals(this.subscriptionState, subscription.subscriptionState) &&
        Objects.equals(this.subscriptionStopTime, subscription.subscriptionStopTime) &&
        Objects.equals(this.updateMethod, subscription.updateMethod) &&
        Objects.equals(this.targets, subscription.targets) &&
        Objects.equals(this.filterReference, subscription.filterReference) &&
        Objects.equals(this.catalogueReference, subscription.catalogueReference) &&
        Objects.equals(this.subscriptionExtension, subscription.subscriptionExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteSubscription, deliveryInterval, operatingMode, subscriptionStartTime, subscriptionState, subscriptionStopTime, updateMethod, targets, filterReference, catalogueReference, subscriptionExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    deleteSubscription: ").append(toIndentedString(deleteSubscription)).append("\n");
    sb.append("    deliveryInterval: ").append(toIndentedString(deliveryInterval)).append("\n");
    sb.append("    operatingMode: ").append(toIndentedString(operatingMode)).append("\n");
    sb.append("    subscriptionStartTime: ").append(toIndentedString(subscriptionStartTime)).append("\n");
    sb.append("    subscriptionState: ").append(toIndentedString(subscriptionState)).append("\n");
    sb.append("    subscriptionStopTime: ").append(toIndentedString(subscriptionStopTime)).append("\n");
    sb.append("    updateMethod: ").append(toIndentedString(updateMethod)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    filterReference: ").append(toIndentedString(filterReference)).append("\n");
    sb.append("    catalogueReference: ").append(toIndentedString(catalogueReference)).append("\n");
    sb.append("    subscriptionExtension: ").append(toIndentedString(subscriptionExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

