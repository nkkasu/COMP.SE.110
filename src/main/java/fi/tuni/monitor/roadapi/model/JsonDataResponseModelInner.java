/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * JsonDataResponseModelInner
 */
@JsonPropertyOrder({
  JsonDataResponseModelInner.JSON_PROPERTY_DATA_TIMESTAMP,
  JsonDataResponseModelInner.JSON_PROPERTY_COUNT,
  JsonDataResponseModelInner.JSON_PROPERTY_INTERVAL,
  JsonDataResponseModelInner.JSON_PROPERTY_STATUS
})
@JsonTypeName("JsonDataResponseModel_inner")
public class JsonDataResponseModelInner {
  public static final String JSON_PROPERTY_DATA_TIMESTAMP = "dataTimestamp";
  private OffsetDateTime dataTimestamp;

  public static final String JSON_PROPERTY_COUNT = "count";
  private BigDecimal count;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private BigDecimal interval;

  public static final String JSON_PROPERTY_STATUS = "status";
  private BigDecimal status;

  public JsonDataResponseModelInner() {
  }

  public JsonDataResponseModelInner dataTimestamp(OffsetDateTime dataTimestamp) {
    
    this.dataTimestamp = dataTimestamp;
    return this;
  }

   /**
   * Data interval start
   * @return dataTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Data interval start")
  @JsonProperty(JSON_PROPERTY_DATA_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDataTimestamp() {
    return dataTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataTimestamp(OffsetDateTime dataTimestamp) {
    this.dataTimestamp = dataTimestamp;
  }


  public JsonDataResponseModelInner count(BigDecimal count) {
    
    this.count = count;
    return this;
  }

   /**
   * Counter count
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Counter count")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public JsonDataResponseModelInner interval(BigDecimal interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Interval length in minutes
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interval length in minutes")
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(BigDecimal interval) {
    this.interval = interval;
  }


  public JsonDataResponseModelInner status(BigDecimal status) {
    
    this.status = status;
    return this;
  }

   /**
   * Counter status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Counter status")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(BigDecimal status) {
    this.status = status;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonDataResponseModelInner jsonDataResponseModelInner = (JsonDataResponseModelInner) o;
    return Objects.equals(this.dataTimestamp, jsonDataResponseModelInner.dataTimestamp) &&
        Objects.equals(this.count, jsonDataResponseModelInner.count) &&
        Objects.equals(this.interval, jsonDataResponseModelInner.interval) &&
        Objects.equals(this.status, jsonDataResponseModelInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataTimestamp, count, interval, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonDataResponseModelInner {\n");
    sb.append("    dataTimestamp: ").append(toIndentedString(dataTimestamp)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

