/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.LocationSubtypeJson;
import fi.tuni.monitor.roadapi.model.LocationTypeJson;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Location types and location subtypes
 */
@ApiModel(description = "Location types and location subtypes")
@JsonPropertyOrder({
  LocationTypesMetadata.JSON_PROPERTY_TYPES_UPDATED,
  LocationTypesMetadata.JSON_PROPERTY_TYPES_VERSION,
  LocationTypesMetadata.JSON_PROPERTY_LOCATION_TYPES,
  LocationTypesMetadata.JSON_PROPERTY_LOCATION_SUBTYPES
})
public class LocationTypesMetadata {
  public static final String JSON_PROPERTY_TYPES_UPDATED = "typesUpdated";
  private OffsetDateTime typesUpdated;

  public static final String JSON_PROPERTY_TYPES_VERSION = "typesVersion";
  private String typesVersion;

  public static final String JSON_PROPERTY_LOCATION_TYPES = "locationTypes";
  private List<LocationTypeJson> locationTypes = null;

  public static final String JSON_PROPERTY_LOCATION_SUBTYPES = "locationSubtypes";
  private List<LocationSubtypeJson> locationSubtypes = null;

  public LocationTypesMetadata() {
  }

  public LocationTypesMetadata typesUpdated(OffsetDateTime typesUpdated) {
    
    this.typesUpdated = typesUpdated;
    return this;
  }

   /**
   * Get typesUpdated
   * @return typesUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPES_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTypesUpdated() {
    return typesUpdated;
  }


  @JsonProperty(JSON_PROPERTY_TYPES_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypesUpdated(OffsetDateTime typesUpdated) {
    this.typesUpdated = typesUpdated;
  }


  public LocationTypesMetadata typesVersion(String typesVersion) {
    
    this.typesVersion = typesVersion;
    return this;
  }

   /**
   * Get typesVersion
   * @return typesVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPES_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypesVersion() {
    return typesVersion;
  }


  @JsonProperty(JSON_PROPERTY_TYPES_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypesVersion(String typesVersion) {
    this.typesVersion = typesVersion;
  }


  public LocationTypesMetadata locationTypes(List<LocationTypeJson> locationTypes) {
    
    this.locationTypes = locationTypes;
    return this;
  }

  public LocationTypesMetadata addLocationTypesItem(LocationTypeJson locationTypesItem) {
    if (this.locationTypes == null) {
      this.locationTypes = new ArrayList<>();
    }
    this.locationTypes.add(locationTypesItem);
    return this;
  }

   /**
   * Get locationTypes
   * @return locationTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOCATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LocationTypeJson> getLocationTypes() {
    return locationTypes;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocationTypes(List<LocationTypeJson> locationTypes) {
    this.locationTypes = locationTypes;
  }


  public LocationTypesMetadata locationSubtypes(List<LocationSubtypeJson> locationSubtypes) {
    
    this.locationSubtypes = locationSubtypes;
    return this;
  }

  public LocationTypesMetadata addLocationSubtypesItem(LocationSubtypeJson locationSubtypesItem) {
    if (this.locationSubtypes == null) {
      this.locationSubtypes = new ArrayList<>();
    }
    this.locationSubtypes.add(locationSubtypesItem);
    return this;
  }

   /**
   * Get locationSubtypes
   * @return locationSubtypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOCATION_SUBTYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LocationSubtypeJson> getLocationSubtypes() {
    return locationSubtypes;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION_SUBTYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocationSubtypes(List<LocationSubtypeJson> locationSubtypes) {
    this.locationSubtypes = locationSubtypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationTypesMetadata locationTypesMetadata = (LocationTypesMetadata) o;
    return Objects.equals(this.typesUpdated, locationTypesMetadata.typesUpdated) &&
        Objects.equals(this.typesVersion, locationTypesMetadata.typesVersion) &&
        Objects.equals(this.locationTypes, locationTypesMetadata.locationTypes) &&
        Objects.equals(this.locationSubtypes, locationTypesMetadata.locationSubtypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typesUpdated, typesVersion, locationTypes, locationSubtypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationTypesMetadata {\n");
    sb.append("    typesUpdated: ").append(toIndentedString(typesUpdated)).append("\n");
    sb.append("    typesVersion: ").append(toIndentedString(typesVersion)).append("\n");
    sb.append("    locationTypes: ").append(toIndentedString(locationTypes)).append("\n");
    sb.append("    locationSubtypes: ").append(toIndentedString(locationSubtypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

