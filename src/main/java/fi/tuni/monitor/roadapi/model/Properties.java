/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.SignTextRow;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Variable Sign properties
 */
@ApiModel(description = "Variable Sign properties")
@JsonPropertyOrder({
  Properties.JSON_PROPERTY_ID,
  Properties.JSON_PROPERTY_TYPE,
  Properties.JSON_PROPERTY_ROAD_ADDRESS,
  Properties.JSON_PROPERTY_DIRECTION,
  Properties.JSON_PROPERTY_CARRIAGEWAY,
  Properties.JSON_PROPERTY_DISPLAY_VALUE,
  Properties.JSON_PROPERTY_ADDITIONAL_INFORMATION,
  Properties.JSON_PROPERTY_EFFECT_DATE,
  Properties.JSON_PROPERTY_CAUSE,
  Properties.JSON_PROPERTY_RELIABILITY,
  Properties.JSON_PROPERTY_TEXT_ROWS
})
public class Properties {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  /**
   * Type
   */
  public enum TypeEnum {
    SPEEDLIMIT("SPEEDLIMIT"),
    
    WARNING("WARNING"),
    
    INFORMATION("INFORMATION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_ROAD_ADDRESS = "roadAddress";
  private String roadAddress;

  /**
   * Direction of variable sign, increasing or decreasing road address
   */
  public enum DirectionEnum {
    INCREASING("INCREASING"),
    
    DECREASING("DECREASING");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private JsonNullable<DirectionEnum> direction = JsonNullable.<DirectionEnum>undefined();

  /**
   * Variable sign placement: SINGLE &#x3D; Single carriageway rod RIGHT &#x3D; First carriageway on the right in the direction of the road number LEFT &#x3D; Second carriageway on the left in the direction of the road number BETWEEN &#x3D; Between the carriageways
   */
  public enum CarriagewayEnum {
    SINGLE("SINGLE"),
    
    RIGHT("RIGHT"),
    
    LEFT("LEFT"),
    
    BETWEEN("BETWEEN"),
    
    END_OF_ROAD("END_OF_ROAD"),
    
    ALONG("ALONG"),
    
    ACROSS("ACROSS");

    private String value;

    CarriagewayEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CarriagewayEnum fromValue(String value) {
      for (CarriagewayEnum b : CarriagewayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CARRIAGEWAY = "carriageway";
  private CarriagewayEnum carriageway;

  public static final String JSON_PROPERTY_DISPLAY_VALUE = "displayValue";
  private String displayValue;

  public static final String JSON_PROPERTY_ADDITIONAL_INFORMATION = "additionalInformation";
  private JsonNullable<String> additionalInformation = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EFFECT_DATE = "effectDate";
  private OffsetDateTime effectDate;

  public static final String JSON_PROPERTY_CAUSE = "cause";
  private JsonNullable<String> cause = JsonNullable.<String>undefined();

  /**
   * Variable sign reliability
   */
  public enum ReliabilityEnum {
    NORMAL("NORMAL"),
    
    DISCONNECTED("DISCONNECTED"),
    
    MALFUNCTION("MALFUNCTION");

    private String value;

    ReliabilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReliabilityEnum fromValue(String value) {
      for (ReliabilityEnum b : ReliabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RELIABILITY = "reliability";
  private ReliabilityEnum reliability;

  public static final String JSON_PROPERTY_TEXT_ROWS = "textRows";
  private List<SignTextRow> textRows = null;

  public Properties() {
  }

  public Properties id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Properties type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Properties roadAddress(String roadAddress) {
    
    this.roadAddress = roadAddress;
    return this;
  }

   /**
   * Sign location as road address
   * @return roadAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sign location as road address")
  @JsonProperty(JSON_PROPERTY_ROAD_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRoadAddress() {
    return roadAddress;
  }


  @JsonProperty(JSON_PROPERTY_ROAD_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoadAddress(String roadAddress) {
    this.roadAddress = roadAddress;
  }


  public Properties direction(DirectionEnum direction) {
    this.direction = JsonNullable.<DirectionEnum>of(direction);
    
    return this;
  }

   /**
   * Direction of variable sign, increasing or decreasing road address
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Direction of variable sign, increasing or decreasing road address")
  @JsonIgnore

  public DirectionEnum getDirection() {
        return direction.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DirectionEnum> getDirection_JsonNullable() {
    return direction;
  }
  
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  public void setDirection_JsonNullable(JsonNullable<DirectionEnum> direction) {
    this.direction = direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = JsonNullable.<DirectionEnum>of(direction);
  }


  public Properties carriageway(CarriagewayEnum carriageway) {
    
    this.carriageway = carriageway;
    return this;
  }

   /**
   * Variable sign placement: SINGLE &#x3D; Single carriageway rod RIGHT &#x3D; First carriageway on the right in the direction of the road number LEFT &#x3D; Second carriageway on the left in the direction of the road number BETWEEN &#x3D; Between the carriageways
   * @return carriageway
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variable sign placement: SINGLE = Single carriageway rod RIGHT = First carriageway on the right in the direction of the road number LEFT = Second carriageway on the left in the direction of the road number BETWEEN = Between the carriageways")
  @JsonProperty(JSON_PROPERTY_CARRIAGEWAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CarriagewayEnum getCarriageway() {
    return carriageway;
  }


  @JsonProperty(JSON_PROPERTY_CARRIAGEWAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCarriageway(CarriagewayEnum carriageway) {
    this.carriageway = carriageway;
  }


  public Properties displayValue(String displayValue) {
    
    this.displayValue = displayValue;
    return this;
  }

   /**
   * Value that is displayed on the device
   * @return displayValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value that is displayed on the device")
  @JsonProperty(JSON_PROPERTY_DISPLAY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayValue() {
    return displayValue;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayValue(String displayValue) {
    this.displayValue = displayValue;
  }


  public Properties additionalInformation(String additionalInformation) {
    this.additionalInformation = JsonNullable.<String>of(additionalInformation);
    
    return this;
  }

   /**
   * Additional information displayed on the device
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information displayed on the device")
  @JsonIgnore

  public String getAdditionalInformation() {
        return additionalInformation.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAdditionalInformation_JsonNullable() {
    return additionalInformation;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
  public void setAdditionalInformation_JsonNullable(JsonNullable<String> additionalInformation) {
    this.additionalInformation = additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = JsonNullable.<String>of(additionalInformation);
  }


  public Properties effectDate(OffsetDateTime effectDate) {
    
    this.effectDate = effectDate;
    return this;
  }

   /**
   * Information is effect after this date
   * @return effectDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information is effect after this date")
  @JsonProperty(JSON_PROPERTY_EFFECT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEffectDate() {
    return effectDate;
  }


  @JsonProperty(JSON_PROPERTY_EFFECT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectDate(OffsetDateTime effectDate) {
    this.effectDate = effectDate;
  }


  public Properties cause(String cause) {
    this.cause = JsonNullable.<String>of(cause);
    
    return this;
  }

   /**
   * Cause for changing the sign: Automaatti &#x3D; Automatic Käsiohjaus &#x3D; By hand
   * @return cause
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cause for changing the sign: Automaatti = Automatic Käsiohjaus = By hand")
  @JsonIgnore

  public String getCause() {
        return cause.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CAUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCause_JsonNullable() {
    return cause;
  }
  
  @JsonProperty(JSON_PROPERTY_CAUSE)
  public void setCause_JsonNullable(JsonNullable<String> cause) {
    this.cause = cause;
  }

  public void setCause(String cause) {
    this.cause = JsonNullable.<String>of(cause);
  }


  public Properties reliability(ReliabilityEnum reliability) {
    
    this.reliability = reliability;
    return this;
  }

   /**
   * Variable sign reliability
   * @return reliability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variable sign reliability")
  @JsonProperty(JSON_PROPERTY_RELIABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReliabilityEnum getReliability() {
    return reliability;
  }


  @JsonProperty(JSON_PROPERTY_RELIABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReliability(ReliabilityEnum reliability) {
    this.reliability = reliability;
  }


  public Properties textRows(List<SignTextRow> textRows) {
    
    this.textRows = textRows;
    return this;
  }

  public Properties addTextRowsItem(SignTextRow textRowsItem) {
    if (this.textRows == null) {
      this.textRows = new ArrayList<>();
    }
    this.textRows.add(textRowsItem);
    return this;
  }

   /**
   * Text rows if sign contains a screen
   * @return textRows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text rows if sign contains a screen")
  @JsonProperty(JSON_PROPERTY_TEXT_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SignTextRow> getTextRows() {
    return textRows;
  }


  @JsonProperty(JSON_PROPERTY_TEXT_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextRows(List<SignTextRow> textRows) {
    this.textRows = textRows;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Properties properties = (Properties) o;
    return Objects.equals(this.id, properties.id) &&
        Objects.equals(this.type, properties.type) &&
        Objects.equals(this.roadAddress, properties.roadAddress) &&
        equalsNullable(this.direction, properties.direction) &&
        Objects.equals(this.carriageway, properties.carriageway) &&
        Objects.equals(this.displayValue, properties.displayValue) &&
        equalsNullable(this.additionalInformation, properties.additionalInformation) &&
        Objects.equals(this.effectDate, properties.effectDate) &&
        equalsNullable(this.cause, properties.cause) &&
        Objects.equals(this.reliability, properties.reliability) &&
        Objects.equals(this.textRows, properties.textRows);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, roadAddress, hashCodeNullable(direction), carriageway, displayValue, hashCodeNullable(additionalInformation), effectDate, hashCodeNullable(cause), reliability, textRows);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Properties {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    roadAddress: ").append(toIndentedString(roadAddress)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    carriageway: ").append(toIndentedString(carriageway)).append("\n");
    sb.append("    displayValue: ").append(toIndentedString(displayValue)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    effectDate: ").append(toIndentedString(effectDate)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    reliability: ").append(toIndentedString(reliability)).append("\n");
    sb.append("    textRows: ").append(toIndentedString(textRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

