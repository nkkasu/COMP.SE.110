/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.roadapi.model.ExtensionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InternationalIdentifier
 */
@JsonPropertyOrder({
  InternationalIdentifier.JSON_PROPERTY_COUNTRY,
  InternationalIdentifier.JSON_PROPERTY_NATIONAL_IDENTIFIER,
  InternationalIdentifier.JSON_PROPERTY_INTERNATIONAL_IDENTIFIER_EXTENSION
})
public class InternationalIdentifier {
  /**
   * Gets or Sets country
   */
  public enum CountryEnum {
    AT("AT"),
    
    BE("BE"),
    
    BG("BG"),
    
    CH("CH"),
    
    CS("CS"),
    
    CY("CY"),
    
    CZ("CZ"),
    
    DE("DE"),
    
    DK("DK"),
    
    EE("EE"),
    
    ES("ES"),
    
    FI("FI"),
    
    FO("FO"),
    
    FR("FR"),
    
    GB("GB"),
    
    GG("GG"),
    
    GI("GI"),
    
    GR("GR"),
    
    HR("HR"),
    
    HU("HU"),
    
    IE("IE"),
    
    IM("IM"),
    
    IS("IS"),
    
    IT("IT"),
    
    JE("JE"),
    
    LI("LI"),
    
    LT("LT"),
    
    LU("LU"),
    
    LV("LV"),
    
    MA("MA"),
    
    MC("MC"),
    
    MK("MK"),
    
    MT("MT"),
    
    NL("NL"),
    
    NO("NO"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    SE("SE"),
    
    SI("SI"),
    
    SK("SK"),
    
    SM("SM"),
    
    TR("TR"),
    
    VA("VA"),
    
    OTHER("OTHER");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private CountryEnum country;

  public static final String JSON_PROPERTY_NATIONAL_IDENTIFIER = "nationalIdentifier";
  private String nationalIdentifier;

  public static final String JSON_PROPERTY_INTERNATIONAL_IDENTIFIER_EXTENSION = "internationalIdentifierExtension";
  private ExtensionType internationalIdentifierExtension;

  public InternationalIdentifier() {
  }

  public InternationalIdentifier country(CountryEnum country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CountryEnum getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountry(CountryEnum country) {
    this.country = country;
  }


  public InternationalIdentifier nationalIdentifier(String nationalIdentifier) {
    
    this.nationalIdentifier = nationalIdentifier;
    return this;
  }

   /**
   * Get nationalIdentifier
   * @return nationalIdentifier
  **/
 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNationalIdentifier() {
    return nationalIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_NATIONAL_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNationalIdentifier(String nationalIdentifier) {
    this.nationalIdentifier = nationalIdentifier;
  }


  public InternationalIdentifier internationalIdentifierExtension(ExtensionType internationalIdentifierExtension) {
    
    this.internationalIdentifierExtension = internationalIdentifierExtension;
    return this;
  }

   /**
   * Get internationalIdentifierExtension
   * @return internationalIdentifierExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTERNATIONAL_IDENTIFIER_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtensionType getInternationalIdentifierExtension() {
    return internationalIdentifierExtension;
  }


  @JsonProperty(JSON_PROPERTY_INTERNATIONAL_IDENTIFIER_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternationalIdentifierExtension(ExtensionType internationalIdentifierExtension) {
    this.internationalIdentifierExtension = internationalIdentifierExtension;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternationalIdentifier internationalIdentifier = (InternationalIdentifier) o;
    return Objects.equals(this.country, internationalIdentifier.country) &&
        Objects.equals(this.nationalIdentifier, internationalIdentifier.nationalIdentifier) &&
        Objects.equals(this.internationalIdentifierExtension, internationalIdentifier.internationalIdentifierExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, nationalIdentifier, internationalIdentifierExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternationalIdentifier {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    nationalIdentifier: ").append(toIndentedString(nationalIdentifier)).append("\n");
    sb.append("    internationalIdentifierExtension: ").append(toIndentedString(internationalIdentifierExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

