/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.*;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.tuni.monitor.data.Coordinate;
import fi.tuni.monitor.roadapi.model.LineString;
import fi.tuni.monitor.roadapi.model.MultiLineString;
import fi.tuni.monitor.roadapi.model.MultiPoint;
import fi.tuni.monitor.roadapi.model.MultiPolygon;
import fi.tuni.monitor.roadapi.model.Point;
import fi.tuni.monitor.roadapi.model.Polygon;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.stream.Collectors;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javafx.util.Pair;

/**
 * GeoJson Geometry Object
 */
@ApiModel(description = "GeoJson Geometry Object")
@JsonPropertyOrder({
  GeometryObject.JSON_PROPERTY_TYPE,
  GeometryObject.JSON_PROPERTY_COORDINATES
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = LineString.class, name = "LineString"),
  @JsonSubTypes.Type(value = MultiLineString.class, name = "MultiLineString"),
  @JsonSubTypes.Type(value = MultiPoint.class, name = "MultiPoint"),
  @JsonSubTypes.Type(value = MultiPolygon.class, name = "MultiPolygon"),
  @JsonSubTypes.Type(value = Point.class, name = "Point"),
  @JsonSubTypes.Type(value = Polygon.class, name = "Polygon"),
})

public class GeometryObject {
  /**
   * GeoJson Geometry Object type
   */
  public enum TypeEnum {
    POINT("Point"),
    
    LINESTRING("LineString"),
    
    POLYGON("Polygon"),
    
    MULTIPOINT("MultiPoint"),
    
    MULTILINESTRING("MultiLineString"),
    
    MULTIPOLYGON("MultiPolygon");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  protected TypeEnum type;

  public static final String JSON_PROPERTY_COORDINATES = "coordinates";
  private List<Object> coordinates = new ArrayList<>();

  public GeometryObject() {
  }

  public GeometryObject type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * GeoJson Geometry Object type
   * @return type
  **/
 
  @ApiModelProperty(required = true, value = "GeoJson Geometry Object type")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GeometryObject coordinates(List<Object> coordinates) {
    
    this.coordinates = coordinates;
    return this;
  }

  public GeometryObject addCoordinatesItem(Object coordinatesItem) {
    this.coordinates.add(coordinatesItem);
    return this;
  }

   /**
   * GeoJson Geometry Object coordinates
   * @return coordinates
  **/
 
  @ApiModelProperty(required = true, value = "GeoJson Geometry Object coordinates")
  @JsonProperty(JSON_PROPERTY_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getCoordinates() {
    return coordinates;
  }

  private Coordinate flattenPoint(List<Object> point) {
    return new Coordinate((Double) point.get(0), (Double) point.get(1));
  }

  private List<Coordinate> flattenLineString(List<Object> points) {
    return points.stream().map(point -> flattenPoint((List<Object>) point)).toList();
  }

  private List<Coordinate> flattenMultiLineString(List<Object> lines) {
    return lines
            .stream()
            .map(line -> flattenLineString((List<Object>) line))
            .flatMap(Collection::stream)
            .collect(Collectors.toList());
  }

  private List<Coordinate> flattenMultiPolygon(List<Object> polygons) {
    return polygons
            .stream()
            .map(polygon -> flattenMultiLineString((List<Object>) polygon))
            .flatMap(Collection::stream)
            .collect(Collectors.toList());
  }

  public List<Coordinate> getFlattenedCoordinates() {
    List<Object> coordinates = this.getCoordinates();
    List<Coordinate> flattened = new ArrayList<>();

    switch (this.getType()) {
      case POINT -> flattened.add(this.flattenPoint(coordinates));
      case LINESTRING, MULTIPOINT -> flattened.addAll(this.flattenLineString(coordinates));
      case MULTILINESTRING, POLYGON -> flattened.addAll(this.flattenMultiLineString(coordinates));
      case MULTIPOLYGON -> flattened.addAll(this.flattenMultiPolygon(coordinates));
    }

    return flattened;
  }


  @JsonProperty(JSON_PROPERTY_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCoordinates(List<Object> coordinates) {
    this.coordinates = coordinates;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeometryObject geometryObject = (GeometryObject) o;
    return Objects.equals(this.type, geometryObject.type) &&
        Objects.equals(this.coordinates, geometryObject.coordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, coordinates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeometryObject {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

