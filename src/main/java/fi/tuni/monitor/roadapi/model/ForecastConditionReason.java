/*
 * Digitraffic Road API
 * [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.
 *
 * The version of the OpenAPI document: 2.94.0#e017ffd@2022-10-18T07:48:28+0000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.tuni.monitor.roadapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Forecast that is used is Vaisala’s weather forecast which is initialised from the weather model that performs best for Finland for a period under study. Majority of the times the initialisation is done from ECMWF model data. Then Vaisala meteorologists also manually edit the data to fix certain known errors in the model.
 */
@ApiModel(description = "Forecast that is used is Vaisala’s weather forecast which is initialised from the weather model that performs best for Finland for a period under study. Majority of the times the initialisation is done from ECMWF model data. Then Vaisala meteorologists also manually edit the data to fix certain known errors in the model.")
@JsonPropertyOrder({
  ForecastConditionReason.JSON_PROPERTY_PRECIPITATION_CONDITION,
  ForecastConditionReason.JSON_PROPERTY_ROAD_CONDITION,
  ForecastConditionReason.JSON_PROPERTY_WIND_CONDITION,
  ForecastConditionReason.JSON_PROPERTY_FREEZING_RAIN_CONDITION,
  ForecastConditionReason.JSON_PROPERTY_WINTER_SLIPPERINESS,
  ForecastConditionReason.JSON_PROPERTY_VISIBILITY_CONDITION,
  ForecastConditionReason.JSON_PROPERTY_FRICTION_CONDITION
})
public class ForecastConditionReason {
  /**
   * Precipitation condition:&lt;br&gt; 0 &#x3D; no data available,&lt;br&gt; 1 &#x3D; rain intensity lt 0.2 mm/h,&lt;br&gt; 2 &#x3D; rain intensity ge 0.2 mm/h,&lt;br&gt; 3 &#x3D; rain intensity ge 2.5 mm/h,&lt;br&gt; 4 &#x3D; rain intensity ge 7.6 mm/h,&lt;br&gt; 5 &#x3D; snowing intensity ge 0.2 cm/h,&lt;br&gt; 6 &#x3D; snowing intensity ge 1 cm/h,&lt;br&gt; 7 &#x3D; snowing intensity ge 3 cm/h&lt;br&gt; (lt &#x3D; lower than, ge &#x3D; greater or equal)
   */
  public enum PrecipitationConditionEnum {
    NO_DATA_AVAILABLE("NO_DATA_AVAILABLE"),
    
    NO_RAIN_DRY_WEATHER("NO_RAIN_DRY_WEATHER"),
    
    LIGHT_RAIN("LIGHT_RAIN"),
    
    RAIN("RAIN"),
    
    HEAVY_RAIN("HEAVY_RAIN"),
    
    LIGHT_SNOWFALL("LIGHT_SNOWFALL"),
    
    SNOWFALL("SNOWFALL"),
    
    HEAVY_SNOWFALL("HEAVY_SNOWFALL");

    private String value;

    PrecipitationConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    public String prettifiedValue()
    {
      return Arrays.stream(value.split("_"))
              .map(x -> x.charAt(0) + x.substring(1).toLowerCase())
              .reduce((s1, s2) -> s1 + " " + s2)
              .orElse(value);
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrecipitationConditionEnum fromValue(String value) {
      for (PrecipitationConditionEnum b : PrecipitationConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRECIPITATION_CONDITION = "precipitationCondition";
  private PrecipitationConditionEnum precipitationCondition;

  /**
   * The state of the road
   */
  public enum RoadConditionEnum {
    DRY("DRY"),
    
    MOIST("MOIST"),
    
    WET("WET"),
    
    SLUSH("SLUSH"),
    
    FROST("FROST"),
    
    PARTLY_ICY("PARTLY_ICY"),
    
    ICE("ICE"),
    
    SNOW("SNOW");

    private String value;

    RoadConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RoadConditionEnum fromValue(String value) {
      for (RoadConditionEnum b : RoadConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROAD_CONDITION = "roadCondition";
  private RoadConditionEnum roadCondition;

  /**
   * The strength of wind
   */
  public enum WindConditionEnum {
    WEAK("WEAK"),
    
    MEDIUM("MEDIUM"),
    
    STRONG("STRONG");

    private String value;

    WindConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WindConditionEnum fromValue(String value) {
      for (WindConditionEnum b : WindConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WIND_CONDITION = "windCondition";
  private WindConditionEnum windCondition;

  public static final String JSON_PROPERTY_FREEZING_RAIN_CONDITION = "freezingRainCondition";
  private Boolean freezingRainCondition;

  public static final String JSON_PROPERTY_WINTER_SLIPPERINESS = "winterSlipperiness";
  private Boolean winterSlipperiness;

  /**
   * Visibility
   */
  public enum VisibilityConditionEnum {
    FAIRLY_POOR("FAIRLY_POOR"),
    
    POOR("POOR");

    private String value;

    VisibilityConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityConditionEnum fromValue(String value) {
      for (VisibilityConditionEnum b : VisibilityConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY_CONDITION = "visibilityCondition";
  private VisibilityConditionEnum visibilityCondition;

  /**
   * The amount of friction on the road
   */
  public enum FrictionConditionEnum {
    SLIPPERY("SLIPPERY"),
    
    VERY_SLIPPERY("VERY_SLIPPERY");

    private String value;

    FrictionConditionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrictionConditionEnum fromValue(String value) {
      for (FrictionConditionEnum b : FrictionConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FRICTION_CONDITION = "frictionCondition";
  private FrictionConditionEnum frictionCondition;

  public ForecastConditionReason() {
  }

  public ForecastConditionReason precipitationCondition(PrecipitationConditionEnum precipitationCondition) {
    
    this.precipitationCondition = precipitationCondition;
    return this;
  }

   /**
   * Precipitation condition:&lt;br&gt; 0 &#x3D; no data available,&lt;br&gt; 1 &#x3D; rain intensity lt 0.2 mm/h,&lt;br&gt; 2 &#x3D; rain intensity ge 0.2 mm/h,&lt;br&gt; 3 &#x3D; rain intensity ge 2.5 mm/h,&lt;br&gt; 4 &#x3D; rain intensity ge 7.6 mm/h,&lt;br&gt; 5 &#x3D; snowing intensity ge 0.2 cm/h,&lt;br&gt; 6 &#x3D; snowing intensity ge 1 cm/h,&lt;br&gt; 7 &#x3D; snowing intensity ge 3 cm/h&lt;br&gt; (lt &#x3D; lower than, ge &#x3D; greater or equal)
   * @return precipitationCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Precipitation condition:<br> 0 = no data available,<br> 1 = rain intensity lt 0.2 mm/h,<br> 2 = rain intensity ge 0.2 mm/h,<br> 3 = rain intensity ge 2.5 mm/h,<br> 4 = rain intensity ge 7.6 mm/h,<br> 5 = snowing intensity ge 0.2 cm/h,<br> 6 = snowing intensity ge 1 cm/h,<br> 7 = snowing intensity ge 3 cm/h<br> (lt = lower than, ge = greater or equal)")
  @JsonProperty(JSON_PROPERTY_PRECIPITATION_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrecipitationConditionEnum getPrecipitationCondition() {
    return precipitationCondition;
  }


  @JsonProperty(JSON_PROPERTY_PRECIPITATION_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrecipitationCondition(PrecipitationConditionEnum precipitationCondition) {
    this.precipitationCondition = precipitationCondition;
  }


  public ForecastConditionReason roadCondition(RoadConditionEnum roadCondition) {
    
    this.roadCondition = roadCondition;
    return this;
  }

   /**
   * The state of the road
   * @return roadCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of the road")
  @JsonProperty(JSON_PROPERTY_ROAD_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RoadConditionEnum getRoadCondition() {
    return roadCondition;
  }


  @JsonProperty(JSON_PROPERTY_ROAD_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoadCondition(RoadConditionEnum roadCondition) {
    this.roadCondition = roadCondition;
  }


  public ForecastConditionReason windCondition(WindConditionEnum windCondition) {
    
    this.windCondition = windCondition;
    return this;
  }

   /**
   * The strength of wind
   * @return windCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The strength of wind")
  @JsonProperty(JSON_PROPERTY_WIND_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WindConditionEnum getWindCondition() {
    return windCondition;
  }


  @JsonProperty(JSON_PROPERTY_WIND_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWindCondition(WindConditionEnum windCondition) {
    this.windCondition = windCondition;
  }


  public ForecastConditionReason freezingRainCondition(Boolean freezingRainCondition) {
    
    this.freezingRainCondition = freezingRainCondition;
    return this;
  }

   /**
   * Tells if there is freezing rain: true/false
   * @return freezingRainCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tells if there is freezing rain: true/false")
  @JsonProperty(JSON_PROPERTY_FREEZING_RAIN_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFreezingRainCondition() {
    return freezingRainCondition;
  }


  @JsonProperty(JSON_PROPERTY_FREEZING_RAIN_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreezingRainCondition(Boolean freezingRainCondition) {
    this.freezingRainCondition = freezingRainCondition;
  }


  public ForecastConditionReason winterSlipperiness(Boolean winterSlipperiness) {
    
    this.winterSlipperiness = winterSlipperiness;
    return this;
  }

   /**
   * Tells if it is slippery: true/false
   * @return winterSlipperiness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tells if it is slippery: true/false")
  @JsonProperty(JSON_PROPERTY_WINTER_SLIPPERINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWinterSlipperiness() {
    return winterSlipperiness;
  }


  @JsonProperty(JSON_PROPERTY_WINTER_SLIPPERINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinterSlipperiness(Boolean winterSlipperiness) {
    this.winterSlipperiness = winterSlipperiness;
  }


  public ForecastConditionReason visibilityCondition(VisibilityConditionEnum visibilityCondition) {
    
    this.visibilityCondition = visibilityCondition;
    return this;
  }

   /**
   * Visibility
   * @return visibilityCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Visibility")
  @JsonProperty(JSON_PROPERTY_VISIBILITY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityConditionEnum getVisibilityCondition() {
    return visibilityCondition;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibilityCondition(VisibilityConditionEnum visibilityCondition) {
    this.visibilityCondition = visibilityCondition;
  }


  public ForecastConditionReason frictionCondition(FrictionConditionEnum frictionCondition) {
    
    this.frictionCondition = frictionCondition;
    return this;
  }

   /**
   * The amount of friction on the road
   * @return frictionCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of friction on the road")
  @JsonProperty(JSON_PROPERTY_FRICTION_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FrictionConditionEnum getFrictionCondition() {
    return frictionCondition;
  }


  @JsonProperty(JSON_PROPERTY_FRICTION_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrictionCondition(FrictionConditionEnum frictionCondition) {
    this.frictionCondition = frictionCondition;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastConditionReason forecastConditionReason = (ForecastConditionReason) o;
    return Objects.equals(this.precipitationCondition, forecastConditionReason.precipitationCondition) &&
        Objects.equals(this.roadCondition, forecastConditionReason.roadCondition) &&
        Objects.equals(this.windCondition, forecastConditionReason.windCondition) &&
        Objects.equals(this.freezingRainCondition, forecastConditionReason.freezingRainCondition) &&
        Objects.equals(this.winterSlipperiness, forecastConditionReason.winterSlipperiness) &&
        Objects.equals(this.visibilityCondition, forecastConditionReason.visibilityCondition) &&
        Objects.equals(this.frictionCondition, forecastConditionReason.frictionCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(precipitationCondition, roadCondition, windCondition, freezingRainCondition, winterSlipperiness, visibilityCondition, frictionCondition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastConditionReason {\n");
    sb.append("    precipitationCondition: ").append(toIndentedString(precipitationCondition)).append("\n");
    sb.append("    roadCondition: ").append(toIndentedString(roadCondition)).append("\n");
    sb.append("    windCondition: ").append(toIndentedString(windCondition)).append("\n");
    sb.append("    freezingRainCondition: ").append(toIndentedString(freezingRainCondition)).append("\n");
    sb.append("    winterSlipperiness: ").append(toIndentedString(winterSlipperiness)).append("\n");
    sb.append("    visibilityCondition: ").append(toIndentedString(visibilityCondition)).append("\n");
    sb.append("    frictionCondition: ").append(toIndentedString(frictionCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

